import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

class DataAnalysis():
    """
    TODO: Class description, variables, methods
    """

    def __init__(self, dataset_dir) -> None:
        """
        Init function for this class

        Inputs:
            * dataset_dir: (string) Directory to the location of the
                dataset that will be analysed. 
                TODO: Check path points towards an excel file
        """

        self.dataset_dir = dataset_dir

    def load_data_pandas(self) -> pd.DataFrame:
        """
        Loads an excel spreadsheet from the global excel 
        directory

        Returns:
            * dataset_dir: (pd.DataFrame) Pandas dataframe
                of the given excel spreadsheet
        """

        excel_dataframe = pd.read_excel(self.dataset_dir)
        return excel_dataframe

    def clean_dataset(self, dataframe):
        
        nan_col = dataframe.columns[dataframe.isnull().any()]
        for i in nan_col:
            print(i, dataframe[i].isnull().sum())

        dataframe = dataframe.fillna("")

        return dataframe.fillna("")
    
    def compare_mean_against_existed(self, cust_data, col):
        """
        Takes a column name in the database and takes the mean
        of the value for both those that exited and those that
        remained. 

        TODO: Check column is float/int/double (not String)
        Inputs:     
            * cust_data: (pd.DataFrame) Dataframe that will be 
                analysed 
            * col: (string) Column that will be analysed
        """

        # Get the data for both those who left and those
        # who stayed
        customer_stayed = cust_data.loc[cust_data['Exited'] == 0]
        customer_exited = cust_data.loc[cust_data['Exited'] == 1]

        all_mean = cust_data[col].mean()
        stayed_mean = customer_stayed[col].mean()
        left_mean = customer_exited[col].mean()

        # Output the results:
        print(f"Column: {col}\nAll: {all_mean}\n" \
              f"Stayed: {stayed_mean}\nLeft: {left_mean}\n")

        return all_mean, stayed_mean, left_mean
    
    def compare_mode_against_existed(self, cust_data, col, title, save_name):
        """
        Takes a column name in the database and counts the 
        number of occurances for each value. 

        Inputs:     
            * cust_data: (pd.DataFrame) Dataframe that will be 
                analysed 
            * col: (string) Column that will be analysed
            * title: (string) Title of the figure
            * save_name: (string) Name of figure to save

        Returns:
            * TODO
        """
        # Get the data for both those who left and those
        # who stayed
        customer_stayed = cust_data.loc[cust_data['Exited'] == 0]
        customer_exited = cust_data.loc[cust_data['Exited'] == 1]

        # Calculate the mode
        all_counts = cust_data[col].value_counts()
        stayed_counts = customer_stayed[col].value_counts()
        left_counts = customer_exited[col].value_counts()

        df_combined = pd.DataFrame()

        df_combined['All'] = all_counts
        df_combined['Stayed'] = stayed_counts
        df_combined['Left'] = left_counts

        # Calculate ratio of those that left vs stayed
        country_ratios = []

        # TODO: Use something other than iterrows for efficiency
        for _, row in df_combined.iterrows():
            ratio_left = row['Left']/row['All']
            ratio_stayed = row['Stayed']/row['All']
            country_ratios.append([100, ratio_stayed, ratio_left, row['All']])

        ratios_dataframe = pd.DataFrame(country_ratios)
        print (f"Ratios: {ratios_dataframe}")

        df_combined.sort_index(inplace=True)
        ax = df_combined.plot(kind='bar')

        ax.set_title(title)
        ax.set_ylabel("Num. Customers")
        # Output the result
        print (df_combined)

        plt.tight_layout()
        plt.savefig("Figures/"+save_name)
        plt.show()



        return df_combined

    def plot_against_exited(self, col):
        """
        TODO: Description

        Inputs:
            * col: (string) Column that will be compared against
                whether or not the user exited    
        """
        pass   


def main():

    data_analysis = DataAnalysis("customer_data.xlsx")

    customer_data = data_analysis.load_data_pandas()

    customer_cat = customer_data[['Surname', 'Country', 'Gender', 'CustomerFeedback']]
    customer_num = customer_data[['CreditScore' , 'Age', 'Tenure', 'Balance (EUR)', 'NumberOfProducts', 'HasCreditCard', 'IsActiveMember', 'EstimatedSalary']]
    print (customer_num.describe())

    print (customer_cat.describe(exclude=['int64', 'float64']))
    
    print (customer_data.dtypes)
    clean_customer_data = data_analysis.clean_dataset(customer_data)


    """
    customer_data['EstimatedSalary'] = customer_data['EstimatedSalary'].round(decimals=-4)
    title = "Retention Against Estimated Salary To Nearest Ten Thousand"
    save_name = "estimated_salary.png"
    data_analysis.compare_mode_against_existed(customer_data, "EstimatedSalary", title, save_name)
    """

    #data_analysis.compare_mean_against_existed(customer_data, 'Age')


if __name__ == "__main__":
    main()

"""
Notable insights:

preliminary analysis:
    * Dataset size: (10,000 x 15)

    * Feature types:
        RowNumber             int64
        CustomerId            int64
        Surname              object
        CreditScore           int64
        Country              object
        Gender               object
        Age                   int64
        Tenure                int64
        CustomerFeedback     object
        Balance (EUR)       float64
        NumberOfProducts      int64
        HasCreditCard         int64
        IsActiveMember        int64
        EstimatedSalary     float64
        Exited                int64

data cleaning:
    CustomerFeedback is the only column with NaN values (a totla of 6982). This 
    missing data appears independent of whether or not the user has left the 
    system and so will be filled with empty speech marks to prevent NaN errors
    during model training. 

    * There are no duplicated results in the customer feedback. 

Data Analaysis:

    * The average customer has been with the company for 5 years and holds a 
    balance of around 76,000 euros with a credit score of 650. The majority of 
    users have a credit card and use at least one product. 
    * The expected salary a user has does not seem to affect whether or not they 
    are more likely to exit or not. It is only in the salary range >170,000 that 
    the ratio of those leaving trends consistently below 20%. 
        Graph:
            estimated_salary.png
        Command: 
            customer_data['EstimatedSalary'] = customer_data['EstimatedSalary'].round(decimals=-4)
            data_analysis.compare_mode_against_existed(customer_data, "EstimatedSalary")


    * It is expected that the longer the customer is with the service the more
    they are devoted to staying and not exiting. This only seems to become
    the case at the 10 year mark with the ratio of staying vs leaving
    remaining similar from years 1-9. 
        Graph:
            tenure.png
        Command: 
            data_analysis.compare_mode_against_existed(customer_data, "Tenure")

    * Customers are more likely to leave the server once their balance becomes >0. This is 
        likely due to the fact that those without money in the account or "ghost" users who
        do not use the service (logic only works if product is free)
        Graph:
            binary_balance.png
        Command:
            customer_data['Balance (EUR)'].values[customer_data['Balance (EUR)'].values > 0] = 1
            data_analysis.compare_mode_against_existed(customer_data, "Balance (EUR)", title, save_name)

    * It is interesting that regardless of how active a user is with a balance of 0, they are just as
        likely to stay as they are to leave. 
        Graph:
            zero_balance_active.png
        Command:
            customer_data['Balance (EUR)'].values[customer_data['Balance (EUR)'].values > 0] = 1
            data_analysis.compare_mode_against_existed(customer_data, "IsActiveMember", title, save_name)

            (in data analysis)
            customer_stayed = cust_data[(cust_data['Balance (EUR)'] == 0) & (cust_data['Exited']==0)]
            customer_exited = cust_data[(cust_data['Balance (EUR)'] == 0) & (cust_data['Exited']==1)]
"""